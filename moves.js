let moves = {
	whitePawn: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	king: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle('', 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle('', 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle('', 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle('', 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	queen: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	knight: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	superpawn: {
		jump: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
		noJump: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]]
	},
	man: function(piece, coords) {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (piece.includes('white') && coords[0] == 7) {
			possibleMoves.push([-2,0]);
		} else if (piece.includes('black') && coords[0] == 2) {
		    possibleMoves.push([2,0]);
		}
		return possibleMoves;
	},
	elephant: [[2,2], [2,-2], [-2,2], [-2,-2]],
	minister: [[1,1], [1,-1], [-1,1], [-1,-1]],
	princess: {
		jump: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
		noJump: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]]
	},
	empress: {
		jump: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
		noJump: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]]
	},
	amazon: {
		jump: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
		noJump: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]]
	},
	reverseMinister: [[1,0], [-1,0], [0,1], [0,-1]],
	superBishop: [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	superRook: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7],[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]],
	superKing: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1],[2,2],[0,2],[2,0],[-2,-2],[0,-2],[-2,0],[-2,2],[2,-2]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle('', 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle('', 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle('', 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle('', 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	superKnight: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2],[3,1],[3,-1],[1,3],[1,-3],[-3,1],[-3,-1],[-1,3],[-1,-3]],
	longKnight: [[7,1],[7,-1],[1,7],[1,-7],[-7,1],[-7,-1],[-1,7],[-1,-7]],
	fastKing: function() {
		let possibleMoves = [[2,2],[0,2],[2,0],[-2,-2],[0,-2],[-2,0],[-2,2],[2,-2]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle('', 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle('', 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle('', 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle('', 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	hyperFastKing: function() {
		let possibleMoves = [[3,3],[0,3],[3,0],[-3,-3],[0,-3],[-3,0],[-3,3],[3,-3]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle('', 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle('', 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle('', 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle('', 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	wpawn_mf1_al1r1f1: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1],[-1,0]]
	},
	bpawn_mf1_al1r1f1: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1],[1,0]]
	},
	whiteFivePawn: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1],[-1,0],[0,1],[0,-1]]
	},
	blackFivePawn: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1],[1,0],[0,1],[0,-1]]
	},
	whitePawn_mf1_af1: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,0]]
	},
	blackPawn_mf1_af1: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,0]]
	},
	whitePawn_mf1_aal1ar1: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,0],[0,1],[0,-1]]
	},
	blackPawn_mf1_aal1ar1: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,0],[0,1],[0,-1]]
	}, /* Made since split */
	whitePawn_mf1_adbl1dbr1: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	blackPawn_mf1_adbl1dbr1: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	whitePawn_mf1_al1r1dl1dr1: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[1,1],[1,-1],[-1,1],[-1,-1]]
	},
	blackPawn_mf1_al1r1dl1dr1: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1],[-1,1],[-1,-1]]
	},
	whiteOctoPawn: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]]
	},
	blackOctoPawn: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]]
	},
	whitePawn_mf1_af1dl1dr1: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,0],[1,1],[1,-1]]
	},
	blackPawn_mf1_af1dl1dr1: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,0],[-1,1],[-1,-1]]
	},
	whitePawn_mf1_af1b1al1ar1: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[1,0],[-1,0],[0,-1],[0,1]]
	},
	blackPawn_mf1_af1b1al1ar1: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,0],[-1,0],[0,-1],[0,1]]
	},
	whitePawn_mf1_nfaal1ar1: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[0,1],[0,-1]]
	},
	blackPawn_mf1_nfaal1ar1: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[0,1],[0,-1]]
	},
	whitePawn_mf2_al1r1: {
		two: [-2,0],
		one: [[-2,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_mf2_al1r1: {
		two: [2,0],
		one: [[2,0]],
		diagonal: [[1,1],[1,-1]]
	},
	whitePawn_mf2: {
		two: [-2,0],
		one: [[-2,0]],
		diagonal: []
	},
	blackPawn_mf2: {
		two: [2,0],
		one: [[2,0]],
		diagonal: []
	},
	whitePawn_mf3: {
		two: [-2,0],
		one: [[-3,0]],
		diagonal: []
	},
	blackPawn_mf3: {
		two: [2,0],
		one: [[3,0]],
		diagonal: []
	},
	whitePawn_mf2_af1: {
		two: [-2,0],
		one: [[-2,0]],
		diagonal: [[-1,0]]
	},
	blackPawn_mf2_af1: {
		two: [2,0],
		one: [[2,0]],
		diagonal: [[1,0]]
	},
	queen_atomic: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_atomic: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_atomic: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_atomic: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_atomic: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_atomic: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_atomic: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	queen_ghoul: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_ghoul: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_ghoul: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_ghoul: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_ghoul: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_ghoul: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_ghoul: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	queen_ghost: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_ghost: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_ghost: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_ghost: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_ghost: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_ghost: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_ghost: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	queen_murderous: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_murderous: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_murderous: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_murderous: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_murderous: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_murderous: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_murderous: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	}, 
	sinisterMinister: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2],[1,1],[-1,-1],[1,-1],[-1,1]],
	royalKnight: [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1],[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	slidingKing: function() {
		let possibleMoves = [[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	camel_knight: [[3,1],[3,-1],[1,3],[1,-3],[-3,1],[-3,-1],[-1,3],[-1,-3]],
	colorChangingBishop: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[0,1],[0,-1]],
	disabledKnight: [[2,0], [-2,0], [0,2], [0,-2]],
	spiderKnight: [[2,0], [-2,0], [0,2], [0,-2], [2,2], [2,-2], [-2,2], [-2,-2],[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	threeElephant: [[3,3], [3,-3], [-3,3], [-3,-3]],
	whitePawn_mf4: {
		two: [-2,0],
		one: [[-4,0]],
		diagonal: []
	},
	blackPawn_mf4: {
		two: [2,0],
		one: [[4,0]],
		diagonal: []
	},
	whitePawn_mf2_af1l1r1: {
		two: [-2,0],
		one: [[-2,0]],
		diagonal: [[-1,0],[-1,1],[-1,-1]]
	},
	blackPawn_mf2_af1l1r1: {
		two: [2,0],
		one: [[2,0]],
		diagonal: [[1,0],[1,1],[1,-1]]
	},
	whitePawn_mf2_af1al1ar1b1: {
		two: [-2,0],
		one: [[-2,0]],
		diagonal: [[-1,0],[0,1],[0,-1],[1,0]]
	},
	blackPawn_mf2_af1al1ar1b1: {
		two: [2,0],
		one: [[2,0]],
		diagonal: [[-1,0],[0,1],[0,-1],[1,0]]
	},
	whitePawn_mf3_af1: {
		two: [-2,0],
		one: [[-3,0]],
		diagonal: [[-1,0]]
	},
	blackPawn_mf3_af1: {
		two: [2,0],
		one: [[3,0]],
		diagonal: [[1,0]]
	},
	whitePawn_af1l1r1: {
		two: [-2,0],
		one: [],
		diagonal: [[-1,0],[-1,1],[-1,-1]]
	},
	blackPawn_af1l1r1: {
		two: [2,0],
		one: [],
		diagonal: [[1,0],[1,1],[1,-1]]
	},
	whiteOctapawnLite: {
		two: [-2,0],
		one: [],
		diagonal: [[1,0],[1,1],[1,-1],[0,1],[0,-1],[-1,0],[-1,-1], [-1,1]]
	},
	blackOctapawnLite: {
		two: [2,0],
		one: [],
		diagonal: [[1,0],[1,1],[1,-1],[0,1],[0,-1],[-1,0],[-1,-1], [-1,1]]
	},
	queen_defuser: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_defuser: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_defuser: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_defuser: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_defuser: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_defuser: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_defuser: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	queen_reverseAtomic: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_reverseAtomic: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_reverseAtomic: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_reverseAtomic: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_reverseAtomic: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_reverseAtomic: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_reverseAtomic: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	whitePawn_mf1f2_al1r1: {
		two: [-2,0],
		one: [[-1,0],[-2,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_mf1f2_al1r1: {
		two: [2,0],
		one: [[1,0],[2,0]],
		diagonal: [[1,1],[1,-1]]
	},
	whitePawn_mf1f2_af1l1r1: {
		two: [-2,0],
		one: [[-1,0],[-2,0]],
		diagonal: [[-1,1],[-1,-1],[-1,0]]
	},
	blackPawn_mf1f2_af1l1r1: {
		two: [2,0],
		one: [[1,0],[2,0]],
		diagonal: [[1,1],[1,-1],[1,0]]
	},
	whitePawn_mf1f2_af1l1r1al1ar1: {
		two: [-2,0],
		one: [[-1,0],[-2,0]],
		diagonal: [[-1,1],[-1,-1],[-1,0],[0,1],[0,-1]]
	},
	blackPawn_mf1f2_af1l1r1al1ar1: {
		two: [2,0],
		one: [[1,0],[2,0]],
		diagonal: [[1,1],[1,-1],[1,0],[0,1],[0,-1]]
	},
	whitePawn_mf1f2_al1r1al1ar1: {
		two: [-2,0],
		one: [[-1,0],[-2,0]],
		diagonal: [[-1,1],[-1,-1],[-1,0],[0,1],[0,-1]]
	},
	blackPawn_mf1f2_al1r1al1ar1: {
		two: [2,0],
		one: [[1,0],[2,0]],
		diagonal: [[1,1],[1,-1],[1,0],[0,1],[0,-1]]
	},
	whitePawn_mf1f2_al1r1dbl1dbr1: {
		two: [-2,0],
		one: [[-1,0],[-2,0]],
		diagonal: [[-1,1],[-1,-1],[1,1],[1,-1]]
	},
	blackPawn_mf1f2_al1r1dbl1dbr1: {
		two: [2,0],
		one: [[1,0],[2,0]],
		diagonal: [[-1,1],[-1,-1],[1,1],[1,-1]]
	},
	whitePawn_mf1f2_adb1dbl1dbr1: {
		two: [-2,0],
		one: [[-1,0],[-2,0]],
		diagonal: [[1,1],[1,-1],[1,0]]
	},
	blackPawn_mf1f2_adb1dbl1dbr1: {
		two: [2,0],
		one: [[1,0],[2,0]],
		diagonal: [[-1,1],[-1,-1],[-1,0]]
	},
	whitePawn_mf1f2f3_al1r1: {
		two: [-2,0],
		one: [[-1,0],[-2,0],[-3,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_mf1f2f3_al1r1: {
		two: [2,0],
		one: [[1,0],[2,0],[3,0]],
		diagonal: [[1,1],[1,-1]]
	},
	queen_phantom: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_phantom: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_phantom: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_phantom: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_phantom: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_phantom: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_phantom: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	queen_crowding: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_crowding: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_crowding: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_crowding: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_crowding: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_crowding: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_crowding: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	queen_stacking: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_stacking: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_stacking: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_stacking: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_stacking: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_stacking: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_stacking: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	queen_promotion: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	rook_promotion: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_promotion: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_promotion: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	queen_infinite: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	rook_infinite: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_infinite: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_infinite: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	whitePawn_infinite: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_infinite: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	queen_capturetheflag: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	rook_capturetheflag: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_capturetheflag: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_capturetheflag: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	whitePawn_capturetheflag: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_capturetheflag: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_cloning: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_cloning: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_cloning: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	whitePawn_cloning: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_cloning: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	queen_onemove: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_onemove: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_onemove: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_onemove: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_onemove: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_onemove: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_onemove: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
	queen_shared: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_shared: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_shared: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_shared: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_shared: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_shared: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	queen_fragile: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_fragile: {
		two: [-2,0],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_fragile: {
		two: [2,0],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_fragile: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_fragile: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_fragile: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_fragile: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	},
}
let specialMoves = {
	explosionRadius: [[0,0], [1,0], [1,1], [0,1],[-1,0],[-1,1],[-1,-1],[1,-1],[0,-1]],
	reverseExplosionRadius: [[1,0], [1,1], [0,1],[-1,0],[-1,1],[-1,-1],[1,-1],[0,-1]],
	cloningRadius: [[1,0], [1,1], [0,1],[-1,0],[-1,1],[-1,-1],[1,-1],[0,-1]]
}
let originalMoves = {
	queen_stacking: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	whitePawn_stacking: {
		two: [[-2,0]],
		one: [[-1,0]],
		diagonal: [[-1,1],[-1,-1]]
	},
	blackPawn_stacking: {
		two: [[2,0]],
		one: [[1,0]],
		diagonal: [[1,1],[1,-1]]
	},
	rook_stacking: [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[-1,0],[-2,0],[-3,0],[-4,0],[-5,0],[-6,0],[-7,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,-1],[0,-2],[0,-3],[0,-4],[0,-5],[0,-6],[0,-7]],
	bishop_stacking: [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7]],
	knight_stacking: [[2,1],[2,-1],[1,2],[1,-2],[-2,1],[-2,-1],[-1,2],[-1,-2]],
	king_stacking: function() {
		let possibleMoves = [[1,1],[0,1],[1,0],[-1,-1],[0,-1],[-1,0],[-1,1],[1,-1]];
		if (moveColor == 'white') {
			if (!whiteInCheck) {
				if (checkCastle([8,7], 'white', 'king')) {
					possibleMoves.push([0,2]);
				}
				if (checkCastle([8,3], 'white', 'queen')) {
				    possibleMoves.push([0,-2]);
				}
			}
		} else {
			if (!blackInCheck) {
				if (checkCastle([1,3], 'black', 'queen')) {
				    possibleMoves.push([0,-2]);
				} 
				if (checkCastle([1,7], 'black', 'king')) {
				    possibleMoves.push([0,2]);
				}
			}
		}
		return possibleMoves;
	}
}
let totalPieces = {
	whitePawns: ['whitePawn','whiteMan','whitePawn_mf1_al1r1f1','whiteFivePawn','whitePawn_mf1_af1','whitePawn_mf1_aal1ar1','whitePawn_mf1_adbl1dbr1','whitePawn_mf1_al1r1dl1dr1','whiteOctoPawn','whitePawn_mf1_af1dl1dr1','whitePawn_mf1_af1b1al1ar1','whitePawn_mf1_nfaal1ar1','whitePawn_mf2_al1r1','whitePawn_mf2','whitePawn_mf3','whitePawn_mf2_af1','whitePawn_atomic','whitePawn_ghoul','whitePawn_ghost','whitePawn_murderous','whitePawn_mf4','whitePawn_mf2_af1l1r1','whitePawn_mf2_af1al1ar1b1','whitePawn_mf3_af1','whitePawn_af1l1r1','whiteOctapawnLite','whitePawn_defuser','whitePawn_reverseAtomic','whitePawn_mf1f2_al1r1','whitePawn_mf1f2_af1l1r1','whitePawn_mf1f2_af1l1r1al1ar1','whitePawn_mf1f2_al1r1al1ar1','whitePawn_mf1f2_al1r1dbl1dbr1','whitePawn_mf1f2_adb1dbl1dbr1','whitePawn_mf1f2f3_al1r1','whitePawn_phantom','whitePawn_crowding','whitePawn_stacking','whitePawn_duplicate'],
	blackPawns: ['blackPawn','blackMan','blackPawn_mf1_al1r1f1','blackFivePawn','blackPawn_mf1_af1','blackPawn_mf1_aal1ar1','blackPawn_mf1_adbl1dbr1','blackPawn_mf1_al1r1dl1dr1','blackOctoPawn','blackPawn_mf1_af1dl1dr1','blackPawn_mf1_af1b1al1ar1','blackPawn_mf1_nfaal1ar1','blackPawn_mf2_al1r1','blackPawn_mf2','blackPawn_mf3','blackPawn_mf2_af1','blackPawn_atomic','blackPawn_ghoul','blackPawn_ghost','blackPawn_murderous','blackPawn_mf4','blackPawn_mf2_af1l1r1','blackPawn_mf2_af1al1ar1b1','blackPawn_mf3_af1','blackPawn_af1l1r1','blackOctapawnLite','blackPawn_defuser','blackPawn_reverseAtomic','blackPawn_mf1f2_al1r1','blackPawn_mf1f2_af1l1r1','blackPawn_mf1f2_af1l1r1al1ar1','blackPawn_mf1f2_al1r1al1ar1','blackPawn_mf1f2_al1r1dbl1dbr1','blackPawn_mf1f2_adb1dbl1dbr1','blackPawn_mf1f2f3_al1r1','blackPawn_phantom','blackPawn_crowding','blackPawn_stacking','blackPawn_duplicate'],
	whiteKnights: ['whiteKnight','whiteElephant','white_superKnight','whiteLongKnight','whiteKnight_atomic','whiteKnight_ghoul','whiteKnight_ghost','whiteKnight_murderous','whiteSinisterMinister','whiteRoyalKnight','whiteCamel_knight','whiteDisabledKnight','whiteSpiderKnight','white3Elephant','whiteKnight_defuser','whiteKnight_reverseAtomic','whiteKnight_phantom','whiteKnight_crowding','whiteKnight_stacking','whiteKnight_duplicate'],
	whiteBishops: ['whiteBishop','white_superBishop','whitePrincess','whiteBishop_atomic','whiteBishop_ghoul','whiteBishop_ghost','whiteBishop_murderous','whiteColorChangingBishop','whiteBishop_defuser','whiteBishop_reverseAtomic','whiteBishop_phantom','whiteBishop_crowding','whiteBishop_stacking','whiteBishop_duplicate'],
	whiteRooks: ['whiteRook','whiteEmpress','white_superRook','whiteRook_atomic','whiteRook_ghoul','whiteRook_ghost','whiteRook_murderous','whiteRook_defuser','whiteRook_reverseAtomic','whiteRook_phantom','whiteRook_crowding','whiteRook_stacking','whiteRook_duplicate'],
	whiteKings: ['whiteKing','white_superKing','whiteFastKing','whiteHyperFastKing','whiteKing_atomic','whiteKing_ghoul','whiteKing_ghost','whiteKing_murderous','whiteSlidingKing','whiteKing_defuser','whiteKing_reverseAtomic','whiteKing_phantom','whiteKing_crowding','whiteKing_stacking'],
	whiteQueens: ['whiteQueen','whiteMinister','whiteAmazon','whiteReverseMinister','whiteQueen_atomic','whiteQueen_ghoul','whiteQueen_ghost','whiteQueen_murderous','whiteSinisterMinister','whiteQueen_defuser','whiteQueen_reverseAtomic','whiteQueen_phantom','whiteQueen_crowding','whiteQueen_stacking'],
	blackKnights: ['blackKnight','blackElephant',,'black_superKnight','blackLongKnight','blackKnight_atomic','blackKnight_ghoul','blackKnight_ghost','blackKnight_murderous','blackSinisterMinister','blackRoyalKnight','blackCamel_knight','blackDisabledKnight','blackSpiderKnight','black3Elephant','blackKnight_defuser','blackKnight_reverseAtomic','blackKnight_phantom','blackKnight_crowding','blackKnight_stacking','blackKnight_duplicate'],
	blackBishops: ['blackBishop','black_superBishop','blackPrincess','blackBishop_atomic','blackBishop_ghoul','blackBishop_ghost','blackBishop_murderous','blackColorChangingBishop','blackBishop_defuser','blackBishop_reverseAtomic','blackBishop_phantom','blackBishop_crowding','blackBishop_stacking','blackBishop_duplicate'],
	blackRooks: ['blackRook','blackEmpress','black_superRook','blackRook_atomic','blackRook_ghoul','blackRook_ghost','blackRook_murderous','blackRook_defuser','blackRook_reverseAtomic','blackRook_phantom','blackRook_crowding','blackRook_stacking','blackRook_duplicate'],
	blackKings: ['blackKing','black_superKing','blackFastKing','blackHyperFastKing','blackKing_atomic','blackKing_ghoul','blackKing_ghost','blackKing_murderous','blackSlidingKing','blackKing_defuser','blackKing_reverseAtomic','blackKing_phantom','blackKing_crowding','blackKing_stacking'],
	blackQueens: ['blackQueen','blackMinister','blackAmazon','blackReverseMinister','blackQueen_atomic','blackQueen_ghoul','blackQueen_ghost','blackQueen_murderous','blackSinisterMinister','blackQueen_defuser','blackQueen_reverseAtomic','blackQueen_phantom','blackQueen_crowding','blackQueen_stacking']
}
let catalogue = {
	whitePawn: {
		pieceName: 'whitePawn',
		cost: 1,
		description: 'The basic pawn.',
		strategy: 'Used for defending the king and maintaining a solid line of defense.',
		rarity: 'Uncommon' //Common, Uncommon, Rare, Legendary
	},
}